<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>再见孙悟空</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liuwenfeng.xyz/"/>
  <updated>2019-06-20T07:52:58.508Z</updated>
  <id>http://liuwenfeng.xyz/</id>
  
  <author>
    <name>Heaven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微服务概述</title>
    <link href="http://liuwenfeng.xyz/2019/06/17/microservice-outline/"/>
    <id>http://liuwenfeng.xyz/2019/06/17/microservice-outline/</id>
    <published>2019-06-17T06:47:09.000Z</published>
    <updated>2019-06-20T07:52:58.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单体应用"><a href="#单体应用" class="headerlink" title="单体应用"></a>单体应用</h1><p>早期在业务规模不大、开发团队人员规模较小的时候, 一般都是采用单体应用来开发和部署, 以我们的业务为例:</p><blockquote><p>所有的业务都在 <code>station</code> 工程, 只需要通过 <code>uwsgi</code> 启动 <code>Django</code> 服务, 然后 <code>nginx</code> 将流量转发到 <code>uwsgi</code> 即可.</p></blockquote><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>学习成本低，开发上手快，测试、部署、运维也比较方便，甚至一个人就可以完成一个网站的开发与部署。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>当业务规模逐渐扩大, 开发人员也不断增多时, 单体应用就会碰到各种各样的问题:</p><ul><li>开发效率低</li></ul><blockquote><p>所有的业务都在一个工程, 所有的修改都在一个工程, 就会有很多合并代码的操作, 每次合并代码都要重新测试, 所有的开发人员都要参与其中, 效率很低.</p></blockquote><ul><li>部署效率低</li></ul><blockquote><p>每次一个小改动也得重启整个服务, 当一个工程越来越大, 代码和依赖也会越来越多, 每次发布拉代码, 装依赖, 起服务的时间也会大大的增加.</p></blockquote><ul><li>可用性很低</li></ul><blockquote><p>一旦服务中某个功能有问题可能就会影响整个服务</p></blockquote><h1 id="服务化-SOA"><a href="#服务化-SOA" class="headerlink" title="服务化(SOA)"></a>服务化(SOA)</h1><p>为了解决单体服务的种种问题, SOA的思想出现了</p><p><strong>面向服务的体系结构</strong>(SOA) 是一种分布式运算的软件设计方法。软件的部分组件(调用者)，可以透过网络上的通用协议调用另一个应用软件组件(服务)运行、运作，让调用者获得服务。调用者不需要了解此服务的运作过程。</p><p><code>SOA</code> 架构有这些特性:</p><ul><li><p><strong>服务封装</strong></p></li><li><p><strong>服务松耦合(Loosely coupled)</strong> - 服务之间的关系最小化，只是互相知道。</p></li><li><p><strong>服务契约</strong> - 服务按照服务描述文档所定义的服务契约行事。</p></li><li><p><strong>服务抽象</strong> - 除了服务契约中所描述的内容，服务将对外部隐藏逻辑。</p></li><li><p><strong>服务的重用性</strong> - 将逻辑分布在不同的服务中，以提高服务的重用性。</p></li><li><p><strong>服务的可组合性</strong> - 一组服务可以协调工作并组合起来形成一个组合服务。</p></li><li><p><strong>服务自治</strong> – 服务对所封装的逻辑具有控制权</p></li><li><p><strong>服务无状态</strong> – 服务将一个活动所需保存的信息最小化。</p></li><li><p><strong>服务的可被发现性</strong> – 服务需要对外部提供描述信息，这样可以通过现有的发现机制发现并访问这些服务。</p></li></ul><p>我们现在的架构就有点像但却不是SOA的架构, 封装了几个单独的服务 <code>order</code>, <code>merchandise</code> 等。通过手动修改 <code>Nginx</code> 配置来实现描述信息。但服务间并没有一个描述文件去定义服务调用前后的信息。</p><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><p>微服务没有官方的定义， 准确的说，根本就没有定义。<a href="[https://zh.wikipedia.org/wiki/%E5%BE%AE%E6%9C%8D%E5%8B%99](https://zh.wikipedia.org/wiki/微服務">维基</a>)是这么介绍微服务的:</p><blockquote><p> <strong>微服务</strong> (Microservices) 是一种<a href="https://zh.wikipedia.org/wiki/软件架构" target="_blank" rel="noopener">软件架构风格</a>，它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关 (Language-Independent/Language agnostic) 的 API 集相互通信。</p></blockquote><p>我的理解: 微服务架构是细粒度的 <code>SOA</code>, 从服务的定义到服务部署, 编排, 治理, 运维等等, 都有确切的解决方案。可以说微服务架构是随着 <code>Docker</code> 的盛行而流行的, 使用了 <code>Docker</code> 之后，由开发写各个服务所需的 <code>Dockerfile</code> ，然后统一的进行镜像的构建和线上环境的发布。</p><ul><li><p>独立部署</p><blockquote><p>每个服务都严格遵循独立打包部署的准则，互不影响。比如一台物理机上可以部署多个 Docker 实例，每个 Docker 实例可以部署一个微服务的代码。</p></blockquote></li><li><p>独立维护</p><blockquote><p>每个服务都可以交由一个小团队甚至个人来开发、测试、发布和运维，并对整个生命周期负责。</p></blockquote></li><li><p><strong>服务治理能力要求高</strong></p><blockquote><p>因为拆分为微服务之后，服务的数量变多，因此需要有统一的服务治理平台，来对各个服务进行管理。</p></blockquote><p>总结来说，<strong>微服务架构是将复杂臃肿的单体应用进行细粒度的服务化拆分，每个拆分出来的服务各自独立打包部署，并交由小团队进行开发和运维，从而极大地提高了应用交付的效率。并再次基础上配上相应的服务监控、追踪、治理等组件。</strong></p></li></ul><p>微服务化面临的问题:</p><ul><li><strong>服务如何定义</strong>。 对于微服务来说, 每个服务都运行在自己的进程空间中, 互相调用采用接口的形式, 服务间的调用通过接口描述来约定, 约定包括: 通信协议, 接口名, 接口参数, 返回值等。</li><li><strong>服务如何发布和订阅</strong>。 当拆分为微服务独立部署后，服务提供者该如何对外暴露自己的地址，服务调用者该如何查询所需要调用的服务的地址呢？这个时候你就需要一个类似登记处的地方，能够记录每个服务提供者的地址以供服务调用者查询，在微服务架构里，这个地方就是<strong>注册中心</strong>。</li><li><strong>服务如何监控</strong>。  通常对于一个服务，我们最关心的是 QPS（调用量）、AvgTime（平均耗时）以及 P999（99.9% 的请求性能在多少毫秒以内）这些指标。这时候你就需要一种通用的监控方案，能够覆盖业务埋点、数据收集、数据处理，最后到数据展示的全链路功能。</li><li><strong>服务如何治理</strong>。  拆分为微服务架构后，服务的数量变多了，依赖关系也变复杂了。比如一个服务的性能有问题时，依赖的服务都势必会受到影响。可以设定一个调用性能阈值，如果一段时间内一直超过这个值，那么依赖服务的调用可以直接返回，这就是熔断，也是服务治理最常用的手段之一。</li><li><strong>故障如何定位</strong>。在单体应用拆分为微服务之后，一次用户调用可能依赖多个服务，每个服务又部署在不同的节点上，如果用户调用出现问题，你需要有一种解决方案能够将一次用户请求进行标记，并在多个依赖的服务系统中继续传递，以便串联所有路径，从而进行故障定位。</li></ul><p><img src="http://ww1.sinaimg.cn/large/889f7228gy1g3qcv0h921j20qd0esad2.jpg" alt=""></p><h2 id="服务描述"><a href="#服务描述" class="headerlink" title="服务描述"></a>服务描述</h2><p>服务调用首先要解决的问题就是服务如何对外描述。比如，你对外提供了一个服务，那么这个服务的服务名叫什么？如何调用这个服务的接口？调用这个服务需要提供哪些信息？调用这个服务返回的结果是什么格式的？该如何解析？这些就是服务描述要解决的问题。</p><p>我们 <code>station</code> 工程就有 <code>thrift</code> 通信协议的服务描述文件。</p><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>在微服务架构下，主要有三种角色：服务提供者（RPC Server）、服务消费者（RPC Client）和服务注册中心（Registry），三者的交互关系请看下面这张图:</p><p><img src="http://ww1.sinaimg.cn/large/889f7228gy1g3w4euo5efj20ux0hign7.jpg" alt=""></p><ul><li>RPC Server 提供服务，在启动时，根据服务发布文件中的配置的信息，向 Registry 注册自身服务，并向 Registry 定期发送心跳汇报存活状态。</li><li>RPC Client 调用服务，在启动时，根据服务引用文件中配置的信息，向 Registry 订阅服务，把 Registry 返回的服务节点列表缓存在本地内存中，并与 RPC Sever 建立连接。</li><li>当 RPC Server 节点发生变更时，注册中心会同步变更，RPC Client 感知后会刷新本地内存中缓存的服务节点列表。</li><li>RPC Client 从本地缓存的服务节点列表中，基于负载均衡算法选择一台 RPC Sever 发起调用。</li></ul><p>每个注册中心必须提供下面这些东西:</p><h3 id="1-注册中心-API"><a href="#1-注册中心-API" class="headerlink" title="1. 注册中心 API"></a>1. <strong>注册中心 API</strong></h3><p>注册中心必须提供一些基本的API, 如: 服务注册, 服务注销, 心跳, 服务订阅, 服务变更, 服务查询, 修改等接口</p><h3 id="2-集群部署"><a href="#2-集群部署" class="headerlink" title="2. 集群部署"></a>2. 集群部署</h3><p>作为服务调用的桥梁, 注册中心的重要性不言而喻, 所以注册中心都是使用集群来部署, 用分布式强一致性算法(Raft/Paxos)来保证数据的强一致性。</p><h3 id="3-服务健康状态检测"><a href="#3-服务健康状态检测" class="headerlink" title="3. 服务健康状态检测"></a>3. <strong>服务健康状态检测</strong></h3><p>服务在注册中心注册后, 注册中心还得知道服务节点是否可用, 一般的做法是保持一个长连接, 服务节点定期向注册中心发送心跳包, 如果注册中心超时未收到心跳包, 注册中心就会认为这个节点不可用, 并把这个节点从注册中心删除。</p><h3 id="4-服务状态变更通知"><a href="#4-服务状态变更通知" class="headerlink" title="4. 服务状态变更通知"></a>4. <strong>服务状态变更通知</strong></h3><p>一旦注册中心探测到有服务提供者节点新加入或者被剔除，就必须立刻通知所有订阅该服务的服务消费者，刷新本地缓存的服务节点信息，确保服务调用不会请求不可用的服务提供者节点。</p><p>比如etcd，会提供 Watcher 机制，去实现状态变更后通知给服务调用方的，服务调用方通过 Watch 特定的服务，当这个服务的信息有变更时，注册中心会通知调用方，调用方读取到变更的数据，然后刷新本地缓存的服务器节点信息。</p><h2 id="服务监控"><a href="#服务监控" class="headerlink" title="服务监控"></a>服务监控</h2><p>对服务的监控是必不可少的，微服务也是一样，监控的指标也基本一致: QPS，PV，响应时间，错误率等等。</p><h2 id="故障如何定位"><a href="#故障如何定位" class="headerlink" title="故障如何定位"></a>故障如何定位</h2><p>要定位故障，就得知道每次用户请求经过了哪些服务调用，以及每个服务调用的详细信息。那么就要有一个服务追踪的东西去监控每一个用户请求经过了哪些服务的调用以及调用的具体信息。</p><p>比如我们现在的系统用的就是全局唯一的 <code>request_id</code> 来标识一个用户请求，由客户端发起请求时生成，贯穿整个调用链。但当调用链很复杂时，如果只有一个 <code>request_id</code> 是很难具体体现一个完整的调用过程信息的。通常还会加一个 <code>span_id</code>，标识某个调用跨度，在方法/服务调用前生成，并记录时间。调用完之后将 <code>trace_id/request_id</code> 和 <code>span_id</code> 统一上报。</p><p>成熟的追踪系统有很多，比如: <code>twitter</code> 开源的 <a href="https://github.com/apache/incubator-zipkin" target="_blank" rel="noopener">zipkin</a> , <code>google</code> 的 <a href="https://ai.google/research/pubs/pub36356" target="_blank" rel="noopener">Dapper</a>, 阿里的 <a href="https://cn.aliyun.com/aliware/news/monitoringsolution" target="_blank" rel="noopener">鹰眼</a>, 美团的 <a href="http://tech.meituan.com/mt_mtrace.html" target="_blank" rel="noopener">MTrace</a> 等。</p><h2 id="服务如何治理"><a href="#服务如何治理" class="headerlink" title="服务如何治理"></a>服务如何治理</h2><p>调用关系由本地调用改成远程调用后会增加很多问题，比如网络故障，节点宕机，节点负载过高等等。对于这些情况，都由对应的处理策略。</p><h3 id="节点管理"><a href="#节点管理" class="headerlink" title="节点管理"></a>节点管理</h3><h4 id="1、注册中心主动摘除"><a href="#1、注册中心主动摘除" class="headerlink" title="1、注册中心主动摘除"></a>1、注册中心主动摘除</h4><p>前面说过，注册中心和服务提供节点之间会维持一个长链接，定期发送一个心跳包来检测服务提供者是否不可用，如果超时未收到服务提供者的 <code>ping</code> ，那么就认为次节点不可用，把这个节点从服务器列表里面踢出。</p><h4 id="2、服务消费者主动摘除"><a href="#2、服务消费者主动摘除" class="headerlink" title="2、服务消费者主动摘除"></a>2、服务消费者主动摘除</h4><p>仔细想想注册中心主动剔除策略还是会有点问题，考虑下面这种情况: 注册中心和服务提供者之间的网络出现延迟，导致注册中心超时没收到服务提供者的心跳包，那么注册中心就会把这个节点给摘除掉，而此时服务消费者和服务提供者之间其实并没有任何故障。所以就有了另一种策略，由服务消费者去剔除这个节点，当服务消费者调用服务提供者失败，就把这个节点从内存中摘除。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>一般情况同一个服务，服务提供者会不止一个，那么就得选取一个节点去调用。通常的话有这几种方式。</p><ul><li><p><strong>随机</strong>    从可用节点随机选取一个节点进行调用，这样就不管每台机器的性能，每台机器的调用量基本一致。</p></li><li><p><strong>权重</strong>    给每台机器配置权重，可以给不同性能的机器分配不同的权重，根据机器的性能来决定承受多少调用量。</p></li><li><strong>最少活跃调用算法</strong>    这种算法是在服务消费者这一端的内存里动态维护着同每一个服务节点之间的连接数，当调用某个服务节点时，就给与这个服务节点之间的连接数加 1，调用返回后，就给连接数减 1。然后每次在选择服务节点时，根据内存里维护的连接数倒序排列，选择连接数最小的节点发起调用，也就是选择了调用量最小的服务节点，性能理论上也是最优的。</li><li><strong>一致性 Hash 算法</strong>    指相同参数的请求总是发到同一服务节点。当某一个服务节点出现故障时，原本发往该节点的请求，基于虚拟节点机制，平摊到其他节点上，不会引起剧烈变动。</li></ul><h3 id="服务路由"><a href="#服务路由" class="headerlink" title="服务路由"></a>服务路由</h3><p>对于服务消费者而言，在内存中的可用服务节点列表中选择哪个节点不仅由负载均衡算法决定，还由路由规则确定。路由规则就是通过一定的规则如条件表达式或者正则表达式来限定服务节点的选择范围。比如存在两个版本的服务: <code>/api/v1</code> 和 <code>/api/v2</code>, 部分流量路由到 <code>/api/v2</code> 上，没问题了之后再把所有流量路由到 <code>/api/v2</code> 上，这也满足了灰度的需求。实现一般由两种:</p><ul><li><strong>静态</strong>    在服务消费者写死</li><li><strong>动态</strong>    路由规则放在注册中心，服务消费者定期去请求注册中心来同步本地的路由规则，要想修改路由规则(灰度)，只需修改注册中心的路由规则，等下一个同步周期到了，服务消费者本地的路由规则就会更新。</li></ul><h3 id="服务容错"><a href="#服务容错" class="headerlink" title="服务容错"></a>服务容错</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单体应用&quot;&gt;&lt;a href=&quot;#单体应用&quot; class=&quot;headerlink&quot; title=&quot;单体应用&quot;&gt;&lt;/a&gt;单体应用&lt;/h1&gt;&lt;p&gt;早期在业务规模不大、开发团队人员规模较小的时候, 一般都是采用单体应用来开发和部署, 以我们的业务为例:&lt;/p&gt;
&lt;bloc
      
    
    </summary>
    
    
      <category term="Architecture" scheme="http://liuwenfeng.xyz/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>go 中的 switch 和 select</title>
    <link href="http://liuwenfeng.xyz/2019/03/18/go-switch-select/"/>
    <id>http://liuwenfeng.xyz/2019/03/18/go-switch-select/</id>
    <published>2019-03-18T11:13:30.000Z</published>
    <updated>2019-03-29T06:58:51.612Z</updated>
    
    <content type="html"><![CDATA[<p><code>switch</code> 和 <code>select</code> 都是用来做分支操作的, 他们各自适用于不同的场景。</p><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p><code>select</code> 只能用于 <code>Channel</code> 上的分支操作, 每一个 <code>case</code> 代表一个通信操作(在某个 <code>Channel</code> 上进行发送或者接收), 并且会包含一些语句组成一个语句块。一个接收表达式可能只包含：</p><ul><li>表达式自身(不把接收到的值赋值给变量什么的), 像下面第一个 <code>case</code> , </li><li>或者包含在一个一个简短的变量声明中, 像第二个 <code>case</code></li></ul><p>第二种形式让你能够引用接收到的值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &lt;-ch1:</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">case</span> x := &lt;-ch2:</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">case</span> ch3 &lt;- y:</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>select</code> 会等待 <code>case</code> 中有能够执行的 <code>case</code> 时去执行, 当条件满足时, <code>select</code> 才会去通信并执行 <code>case</code> 之后的语句, 这时候其他通信都不会执行, <strong>一个没有任何 <code>case</code> 的 <code>select{}</code> 语句会永远等待下去。 </strong></p><p><strong>如果有多个 <code>case</code> 同时就绪时, <code>select</code> 会随机地选择一个执行 </strong></p><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p><code>switch</code> 可以为各种类型进行分支操作， 设置可以为接口类型进行分支判断(通过 <code>i.(type))</code>。</p><p><code>switch</code> 分支是顺序执行的，这和 <code>select</code>不同。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;switch&lt;/code&gt; 和 &lt;code&gt;select&lt;/code&gt; 都是用来做分支操作的, 他们各自适用于不同的场景。&lt;/p&gt;
&lt;h4 id=&quot;select&quot;&gt;&lt;a href=&quot;#select&quot; class=&quot;headerlink&quot; title=&quot;selec
      
    
    </summary>
    
      <category term="go" scheme="http://liuwenfeng.xyz/categories/go/"/>
    
    
      <category term="go" scheme="http://liuwenfeng.xyz/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go 中的 channel 和 goroutine 使用时发生的 deadlock 问题</title>
    <link href="http://liuwenfeng.xyz/2019/03/15/go-channel-deadlock/"/>
    <id>http://liuwenfeng.xyz/2019/03/15/go-channel-deadlock/</id>
    <published>2019-03-15T07:11:50.000Z</published>
    <updated>2019-03-15T07:48:45.321Z</updated>
    
    <content type="html"><![CDATA[<p>代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    array := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    nums := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _, a := <span class="keyword">range</span> array &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            nums &lt;- a</span><br><span class="line">        &#125;(a)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="built_in">close</span>(nums)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ go run test.go</span><br><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine 1 [semacquire]:</span><br><span class="line">sync.runtime_Semacquire(0xc42008601c)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>发生了死锁, 所有的 <code>goroutines</code> 都被阻塞了。</p><p>在11行, 我们初始化了一个不带缓存的 <code>Channels</code> , 在创建的子 <code>goroutine</code> 中, 我们向这个 <code>Channels</code> 执行了一个发送的操作。<strong>这个发送操作会导致发送者的 <code>goroutine</code> 阻塞, 直到另一个 <code>goroutine</code> 在相同的 <code>Channels</code> 中执行接收操作。</strong></p><p>在 <code>main goroutine</code> 中的最后, <code>range</code> 从 <code>Channels</code> 中接收数据, 但由于前面的 <code>goroutine</code> 都被阻塞了, 所以 <code>goroutine</code> 中的计数器 <code>wg</code> 并没有执行 <code>Done()</code> 操作, 所以在前面的 <code>wg.Wait()</code> 被阻塞了,  导致 <code>main goroutine</code> 也被阻塞了, 也就导致了 <code>deadlock</code> 的发生。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="1、使用非阻塞-带缓存-的-Channels"><a href="#1、使用非阻塞-带缓存-的-Channels" class="headerlink" title="1、使用非阻塞(带缓存)的 Channels"></a>1、使用非阻塞(带缓存)的 <code>Channels</code></h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    array := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    nums := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="built_in">len</span>(array))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _, a := <span class="keyword">range</span> array &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            nums &lt;- a</span><br><span class="line">        &#125;(a)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="built_in">close</span>(nums)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在通过 <code>make</code> 创建 <code>Channels</code> 时指定第二个参数时创建的就是带缓存的 <code>Channels</code> , 第二个参数指定了该 <code>Channels</code> 的容量。可以使用 <code>len()</code> 和 <code>cap()</code> 获取该带缓存的 <code>Channels</code> 的有效元素和容量。</p><p>带缓存的 <code>Channels</code> 使得向 <code>Channels</code> 执行发送操作不再阻塞, 但当超过缓存容量时, 会引发 <code>panic</code>, 所以缓存的容量大小要设置得当。 </p><h5 id="2-不阻塞-main-goroutine"><a href="#2-不阻塞-main-goroutine" class="headerlink" title="2. 不阻塞 main goroutine"></a>2. 不阻塞 <code>main goroutine</code></h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    array := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">    nums := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _, a := <span class="keyword">range</span> array &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            nums &lt;- a</span><br><span class="line">        &#125;(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        wg.Wait()</span><br><span class="line">    <span class="built_in">close</span>(nums)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里把 <code>wg.Wait()</code> 操作放到了子 <code>goroutine</code> 中, <code>main goroutine</code> 从<code>Channels</code> 中接收数据, 当 <code>Channels</code> 中的数据被取出时, 发送数据到 <code>Channels</code> 的 <code>goruntine</code>  就不在阻塞了, 接着执行 <code>wg.Done()</code>, 当 <code>wg</code> 中的所有都被 <code>Done()</code> 了, <code>wg.Wait()</code> 也就不在阻塞了, 这样所有的 <code>goroutine</code> 都不会阻塞了, 都会正常退出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码:&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
      <category term="go" scheme="http://liuwenfeng.xyz/categories/go/"/>
    
    
      <category term="go" scheme="http://liuwenfeng.xyz/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Python classmethod中的闭包问题</title>
    <link href="http://liuwenfeng.xyz/2019/01/27/python-classmethod-closure/"/>
    <id>http://liuwenfeng.xyz/2019/01/27/python-classmethod-closure/</id>
    <published>2019-01-27T04:06:59.000Z</published>
    <updated>2019-02-12T08:35:17.371Z</updated>
    
    <content type="html"><![CDATA[<p>碰到一个 <code>classmethod</code> 中闭包的局部变量问题, 很有趣。</p><p>先来看下面的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test1.py</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    ctx = &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm_decorator</span><span class="params">(cls, value)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(fn)</span>:</span></span><br><span class="line">            print(<span class="string">"locals: "</span>, locals())</span><br><span class="line"><span class="meta">            @wraps(fn)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">                kwargs[<span class="string">"value"</span>] = value</span><br><span class="line">                <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> wrapper</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@A.cm_decorator("1")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args, kwargs)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3 test1.py</span><br><span class="line">locals:  &#123;<span class="string">'fn'</span>: &lt;<span class="keyword">function</span> <span class="built_in">test</span> at 0x103320598&gt;, <span class="string">'value'</span>: <span class="string">'1'</span>&#125;</span><br><span class="line">() &#123;<span class="string">'value'</span>: <span class="string">'1'</span>&#125;</span><br></pre></td></tr></table></figure><p>OK, 意料之中, 如果把 <code>wrapper</code> 中的 <code>kwargs[&quot;value&quot;] = value</code> 去掉会是怎样的呢? 去掉后的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test2.py</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    ctx = &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm_decorator</span><span class="params">(cls, value)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(fn)</span>:</span></span><br><span class="line">            print(<span class="string">"locals: "</span>, locals())</span><br><span class="line"><span class="meta">            @wraps(fn)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">                <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> wrapper</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@A.cm_decorator("1")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args, kwargs)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3 test2.py</span><br><span class="line">locals:  &#123;<span class="string">'fn'</span>: &lt;<span class="keyword">function</span> <span class="built_in">test</span> at 0x103c05598&gt;&#125;</span><br><span class="line">() &#123;&#125;</span><br></pre></td></tr></table></figure><p>一眼就能发现, 之前的 <code>value</code> 没有了,</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>再看下面这个:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test3.py</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    ctx = &#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm_decorator</span><span class="params">(cls, value)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(fn)</span>:</span></span><br><span class="line">            print(<span class="string">"locals: "</span>, locals())</span><br><span class="line"><span class="meta">            @wraps(fn)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">               </span><br><span class="line">                ctx = cls.ctx</span><br><span class="line">                <span class="keyword">if</span> ctx.get(<span class="string">"value"</span>):</span><br><span class="line">                    value = ctx[<span class="string">"value"</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    kwargs[<span class="string">"value"</span>] = value</span><br><span class="line">                <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> wrapper</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@A.cm_decorator("1")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args, kwargs)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; python3 test2.py</span><br><span class="line">locals:  &#123;<span class="string">'fn'</span>: &lt;<span class="keyword">function</span> <span class="built_in">test</span> at 0x103405598&gt;, <span class="string">'cls'</span>: &lt;class <span class="string">'__main__.A'</span>&gt;&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/heaven/test/2.py"</span>, line 27, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">test</span>()</span><br><span class="line">  File <span class="string">"/Users/heaven/test/2.py"</span>, line 17, <span class="keyword">in</span> wrapper</span><br><span class="line">    kwargs[<span class="string">"value"</span>] = value</span><br><span class="line">UnboundLocalError: <span class="built_in">local</span> variable <span class="string">'value'</span> referenced before assignment</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;碰到一个 &lt;code&gt;classmethod&lt;/code&gt; 中闭包的局部变量问题, 很有趣。&lt;/p&gt;
&lt;p&gt;先来看下面的代码:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://liuwenfeng.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liuwenfeng.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>hello, 2019</title>
    <link href="http://liuwenfeng.xyz/2019/01/01/hello-2019/"/>
    <id>http://liuwenfeng.xyz/2019/01/01/hello-2019/</id>
    <published>2019-01-01T09:16:28.000Z</published>
    <updated>2019-04-01T07:39:15.167Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><h4 id="书"><a href="#书" class="headerlink" title="书"></a>书</h4><ul><li style="list-style: none"><input type="checkbox" checked> <a href="https://book.douban.com/subject/24335672/" target="_blank" rel="noopener">淘宝技术这十年</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://book.douban.com/subject/25863515/" target="_blank" rel="noopener">图解HTTP</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://book.douban.com/subject/26337545/" target="_blank" rel="noopener">Go语言圣经</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://book.douban.com/subject/30357170/" target="_blank" rel="noopener">我的第一本算法书</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://book.douban.com/subject/23008813/" target="_blank" rel="noopener">高性能MySQL</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://book.douban.com/subject/25856314/" target="_blank" rel="noopener">Web性能权威指南 </a></li><li style="list-style: none"><input type="checkbox"> <a href="https://book.douban.com/subject/3004255/" target="_blank" rel="noopener">编程之美</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://book.douban.com/subject/1181690/" target="_blank" rel="noopener">傅雷家书</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://book.douban.com/subject/1007433/" target="_blank" rel="noopener">红与黑</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://book.douban.com/subject/3995526/" target="_blank" rel="noopener">目送</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://book.douban.com/subject/20427187/" target="_blank" rel="noopener">看见</a></li></ul><h4 id="课"><a href="#课" class="headerlink" title="课"></a>课</h4><ul><li style="list-style: none"><input type="checkbox"> <a href="https://pdos.csail.mit.edu/6.824/schedule.html" target="_blank" rel="noopener">MIT 6.824</a></li></ul><h4 id="玩"><a href="#玩" class="headerlink" title="玩"></a>玩</h4><ul><li style="list-style: none"><input type="checkbox"> Ti9 上海</li><li style="list-style: none"><input type="checkbox"> 日本</li></ul><h4 id="乐"><a href="#乐" class="headerlink" title="乐"></a>乐</h4><ul><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/30331149/" target="_blank" rel="noopener">白蛇：缘起</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/4864908/" target="_blank" rel="noopener">影</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/27140017/" target="_blank" rel="noopener">非自然死亡</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/1652592/" target="_blank" rel="noopener">阿丽塔：战斗天使</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/26266893/" target="_blank" rel="noopener">流浪地球</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/1972698/" target="_blank" rel="noopener">守望者</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/26947951/" target="_blank" rel="noopener">王国</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/30163509/" target="_blank" rel="noopener">飞驰人生</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/25986662/" target="_blank" rel="noopener">疯狂的外星人</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/27197086/" target="_blank" rel="noopener">国家破产之日</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/27060077/" target="_blank" rel="noopener">绿皮书</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://www.douban.com/search?q=%E6%97%A0%E8%80%BB%E4%B9%8B%E5%BE%92%28%E7%BE%8E%E7%89%88%29" target="_blank" rel="noopener">无耻之徒(美版)</a></li><li style="list-style: none"><input type="checkbox" checked> <a href="https://movie.douban.com/subject/30164448/" target="_blank" rel="noopener">海市蜃楼</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://movie.douban.com/subject/26584183/" target="_blank" rel="noopener">权力的游戏 第八季</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://movie.douban.com/subject/26100958/" target="_blank" rel="noopener">复仇者联盟4：终局之战</a></li><li style="list-style: none"><input type="checkbox"> <a href="https://movie.douban.com/subject/1950330/" target="_blank" rel="noopener">罗马</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h3&gt;&lt;h4 id=&quot;书&quot;&gt;&lt;a href=&quot;#书&quot; class=&quot;headerlink&quot; title=&quot;书&quot;&gt;&lt;/a&gt;书&lt;/h4&gt;&lt;u
      
    
    </summary>
    
      <category term="小目标" scheme="http://liuwenfeng.xyz/categories/%E5%B0%8F%E7%9B%AE%E6%A0%87/"/>
    
    
  </entry>
  
  <entry>
    <title>Django源码分析(三)--HTTP请求到响应过程分析</title>
    <link href="http://liuwenfeng.xyz/2018/04/03/django-request-response/"/>
    <id>http://liuwenfeng.xyz/2018/04/03/django-request-response/</id>
    <published>2018-04-03T09:45:50.000Z</published>
    <updated>2019-02-12T09:25:53.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django源码分析-四-–-HTTP请求过程"><a href="#Django源码分析-四-–-HTTP请求过程" class="headerlink" title="Django源码分析(四) – HTTP请求过程"></a>Django源码分析(四) – HTTP请求过程</h1><p>所有 <code>Web</code> 框架都是一样, 处理 <code>http</code> 请求: 接收 <code>request</code>, 返回 <code>response</code>。</p><p><a href="https://heavenlwf.github.io/2018/03/28/django-runserver-process/" target="_blank" rel="noopener">前面</a>我们介绍了:</p><ul><li style="list-style: none"><input type="checkbox" checked> 加载project settings</li><li style="list-style: none"><input type="checkbox" checked> 创建WSGIServer</li></ul><p>不管是 <code>runserver</code> 方式还是 <code>uWSGI</code> 启动 <code>Django</code> 项目, 在启动时都会调用 <code>django.core.servers.basehttp</code> 中的 <code>run()</code> 方法, 创建一个 <code>django.core.servers.WSGIServer</code> 的实例, 之后调用 <code>server_forever()</code> 方法启动HTTP服务, 一直处理请求到服务被关闭。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># socketserver.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseServer</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self, poll_interval=<span class="number">0.5</span>)</span>:</span></span><br><span class="line">        self.__is_shut_down.clear()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> _ServerSelector() <span class="keyword">as</span> selector:</span><br><span class="line">                selector.register(self, selectors.EVENT_READ)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> self.__shutdown_request:</span><br><span class="line">                    ready = selector.select(poll_interval)</span><br><span class="line">                    <span class="keyword">if</span> ready:</span><br><span class="line">                        self._handle_request_noblock()</span><br><span class="line"></span><br><span class="line">                    self.service_actions()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.__shutdown_request = <span class="keyword">False</span></span><br><span class="line">            self.__is_shut_down.set()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_handle_request_noblock</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request, client_address = self.get_request()</span><br><span class="line">        <span class="keyword">except</span> OSError:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> self.verify_request(request, client_address):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.process_request(request, client_address)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                self.handle_error(request, client_address)</span><br><span class="line">                self.shutdown_request(request)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.shutdown_request(request)</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.shutdown_request(request)</span><br></pre></td></tr></table></figure></p><p>从源码中可以看到, <code>while</code> 循环一直调用 <code>_handle_request_noblock</code> 方法去处理请求。 <code>_handle_request_noblock</code> 方法处理请求要经过四个过程: <code>get_request、verify_request、process_request、shutdown_request</code>。</p><h2 id="1、再来看-run-方法"><a href="#1、再来看-run-方法" class="headerlink" title="1、再来看 run() 方法"></a>1、再来看 <code>run()</code> 方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django\core\servers\basehttp.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGIServer)</span>:</span></span><br><span class="line">    server_address = (addr, port)</span><br><span class="line">    <span class="keyword">if</span> threading:</span><br><span class="line">        httpd_cls = type(<span class="string">'WSGIServer'</span>, (socketserver.ThreadingMixIn, server_cls), &#123;&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        httpd_cls = server_cls</span><br><span class="line">    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)</span><br><span class="line">    <span class="keyword">if</span> threading:</span><br><span class="line">        httpd.daemon_threads = <span class="keyword">True</span></span><br><span class="line">    httpd.set_app(wsgi_handler)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure><p>可以看到创建 <code>WSGIServer</code> 实例时传进 <code>WSGIRequestHandler</code> 参数, 然后 <code>set_app</code> 方法设置一个可调用的对象作为 <code>application</code>, 请求最终将由这个 <code>application</code> 对象处理并返回 <code>response</code>。</p><p>当收到 <code>HTTP</code> 请求时, <code>WSGIServer</code> 会为每一个请求实例化一个 <code>WSGIRequestHandler</code> 对象, 而 <code>WSGIRequestHandler类</code> 继承自 <code>BaseRequestHandler</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseRequestHandler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, request, client_address, server)</span>:</span></span><br><span class="line">        self.request = request</span><br><span class="line">        self.client_address = client_address</span><br><span class="line">        self.server = server</span><br><span class="line">        self.setup()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.handle()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.finish()</span><br></pre></td></tr></table></figure></p><p>可以看到, 实际是用 <code>WSGIRequestHandler</code> 的 <code>handle()</code> 方法来处理请求(其实最终是使用 <code>wsgiref.handlers.BaseHandler</code> 中的 <code>run</code> 方法处理), 来看看 <code>handle()</code> 里做的处理:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIRequestHandler</span><span class="params">(simple_server.WSGIRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.raw_requestline = self.rfile.readline(<span class="number">65537</span>)</span><br><span class="line">        <span class="keyword">if</span> len(self.raw_requestline) &gt; <span class="number">65536</span>:</span><br><span class="line">            self.requestline = <span class="string">''</span></span><br><span class="line">            self.request_version = <span class="string">''</span></span><br><span class="line">            self.command = <span class="string">''</span></span><br><span class="line">            self.send_error(<span class="number">414</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.parse_request():  <span class="comment"># An error code has been sent, just exit</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        handler = ServerHandler(</span><br><span class="line">            self.rfile, self.wfile, self.get_stderr(), self.get_environ()</span><br><span class="line">        )</span><br><span class="line">        handler.request_handler = self      <span class="comment"># backpointer for logging</span></span><br><span class="line">        handler.run(self.server.get_app())</span><br></pre></td></tr></table></figure></p><p><code>handler</code> 实例化了一个 <code>ServerHandler</code>对象, 并把之前设置的 <code>application</code> 作为参数传入它的 <code>run</code> 方法中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHandler</span>:</span>      <span class="comment"># WSGIRequestHandler 继承于 BaseHandler</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, application)</span>:</span></span><br><span class="line">        <span class="string">"""Invoke the application"""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.setup_environ()</span><br><span class="line">            self.result = application(self.environ, self.start_response)</span><br><span class="line">            self.finish_response()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.handle_error()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># If we get an error handling an error, just give up already!</span></span><br><span class="line">                self.close()</span><br><span class="line">                <span class="keyword">raise</span>   <span class="comment"># ...and let the actual server figure it out.</span></span><br></pre></td></tr></table></figure></p><p>这里就调用了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 2、处理```Request</span><br></pre></td></tr></table></figure></p><p>前面说到的 <code>application</code> , 在 <code>Django</code> 中一般是 <code>django.core.handlers.wsgi.WSGIHandler</code> 对象， <code>WSGIHandler</code> 继承自 <code>django.core.handlers.base.BaseHandler</code> ,<br>这是 <code>Django</code> 处理 <code>Request</code> 的核心， 它会创建一个 <code>WSGIRequest</code> 实例， 而 <code>WSGIRequest</code> 是 <code>http.HttpRequest</code> 继承而来。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django\core\handlers\wsgi.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span><span class="params">(base.BaseHandler)</span>:</span></span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.load_middleware()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        set_script_prefix(get_script_name(environ))</span><br><span class="line">        signals.request_started.send(sender=self.__class__, environ=environ)</span><br><span class="line">        request = self.request_class(environ)</span><br><span class="line">        response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">        response._handler_class = self.__class__</span><br><span class="line"></span><br><span class="line">        status = <span class="string">'%d %s'</span> % (response.status_code, response.reason_phrase)</span><br><span class="line">        response_headers = list(response.items())</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> response.cookies.values():</span><br><span class="line">            response_headers.append((<span class="string">'Set-Cookie'</span>, c.output(header=<span class="string">''</span>)))</span><br><span class="line">        start_response(status, response_headers)</span><br><span class="line">        <span class="keyword">if</span> getattr(response, <span class="string">'file_to_stream'</span>, <span class="keyword">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> environ.get(<span class="string">'wsgi.file_wrapper'</span>):</span><br><span class="line">            response = environ[<span class="string">'wsgi.file_wrapper'</span>](response.file_to_stream)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django源码分析-四-–-HTTP请求过程&quot;&gt;&lt;a href=&quot;#Django源码分析-四-–-HTTP请求过程&quot; class=&quot;headerlink&quot; title=&quot;Django源码分析(四) – HTTP请求过程&quot;&gt;&lt;/a&gt;Django源码分析(四) – 
      
    
    </summary>
    
      <category term="Django" scheme="http://liuwenfeng.xyz/categories/Django/"/>
    
    
      <category term="Django" scheme="http://liuwenfeng.xyz/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django源码分析(二)--middleware</title>
    <link href="http://liuwenfeng.xyz/2018/03/28/django-middleware/"/>
    <id>http://liuwenfeng.xyz/2018/03/28/django-middleware/</id>
    <published>2018-03-28T13:08:46.000Z</published>
    <updated>2019-02-12T09:28:13.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django源码分析-二-–中间件"><a href="#Django源码分析-二-–中间件" class="headerlink" title="Django源码分析(二)–中间件"></a>Django源码分析(二)–中间件</h1><p>接上回, <code>Django</code>启动时会创建一个<code>WSGIHandler</code>实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django\core\handlers\wsgi.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span><span class="params">(base.BaseHandler)</span>:</span></span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(WSGIHandler, self).__init__(*args, **kwargs)</span><br><span class="line">        self.load_middleware()</span><br><span class="line"></span><br><span class="line"><span class="comment"># django\core\handlers\base.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHandler</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化 Django 的中间件</span></span><br><span class="line">        self._request_middleware = <span class="keyword">None</span></span><br><span class="line">        self._view_middleware = <span class="keyword">None</span></span><br><span class="line">        self._template_response_middleware = <span class="keyword">None</span></span><br><span class="line">        self._response_middleware = <span class="keyword">None</span></span><br><span class="line">        self._exception_middleware = <span class="keyword">None</span></span><br><span class="line">        self._middleware_chain = <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_middleware</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Populate middleware lists from settings.MIDDLEWARE (or the deprecated</span></span><br><span class="line"><span class="string">        MIDDLEWARE_CLASSES).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Must be called after the environment is fixed (see __call__ in subclasses).</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._request_middleware = []</span><br><span class="line">        self._view_middleware = []</span><br><span class="line">        self._template_response_middleware = []</span><br><span class="line">        self._response_middleware = []</span><br><span class="line">        self._exception_middleware = []</span><br><span class="line">        handler = convert_exception_to_response(self._get_response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据settings.MIDDLEWARE中的列表，加载中间件</span></span><br><span class="line">        <span class="keyword">for</span> middleware_path <span class="keyword">in</span> reversed(settings.MIDDLEWARE):</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure></p><p>可以看到, <code>load_middleware</code> 会去加载 <code>settings</code> 中的 <code>MIDDLEWARE</code>, 就是下面这个列表:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后遍历里面的元素, 然后根据里面实现的方法把它们加到对应的 <code>list</code>中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_view'</span>):</span><br><span class="line">        self._view_middleware.insert(<span class="number">0</span>, mw_instance.process_view)</span><br><span class="line">    <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_template_response'</span>):</span><br><span class="line">        self._template_response_middleware.append(mw_instance.process_template_response)</span><br><span class="line">    <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_exception'</span>):</span><br><span class="line">        self._exception_middleware.append(mw_instance.process_exception)</span><br><span class="line"></span><br><span class="line">handler = convert_exception_to_response(mw_instance)</span><br></pre></td></tr></table></figure></p><p>当接收到 <code>request</code> 时, 不同的阶段就会调用对应的方法。</p><p>来看一下所谓的 <code>middleware</code> 到底是什么:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django\middleware\common.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    response_redirect_class = http.HttpResponsePermanentRedirect</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># django\utils\deprecation.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_response=None)</span>:</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        super(MiddlewareMixin, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_request'</span>):</span><br><span class="line">            response = self.process_request(request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> response:</span><br><span class="line">            response = self.get_response(request)</span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_response'</span>):</span><br><span class="line">            response = self.process_response(request, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></p><h2 id="中间件的顺序和层次"><a href="#中间件的顺序和层次" class="headerlink" title="中间件的顺序和层次"></a>中间件的顺序和层次</h2><p>在请求(<code>request</code>)阶段，调用视图之前，<code>Django</code> 会按照 <code>MIDDLEWARE</code> 中定义的顺序自顶向下应用中间件。会用到两个钩子。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process_request()</span><br><span class="line"></span><br><span class="line">process_view()</span><br></pre></td></tr></table></figure></p><p>在响应( <code>response</code>)阶段，调用视图之后，中间件会按照相反的顺序应用，自底向上。会用到三个钩子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">process_excpetion()</span><br><span class="line"></span><br><span class="line">process_template_response()</span><br><span class="line"></span><br><span class="line">process_response()</span><br></pre></td></tr></table></figure></p><p><img src="https://heavenlwf.github.io/images/django-middleware.png" alt=""><br>你可以把它想象成一颗洋葱：每个中间件都是包裹视图的一层’皮’，而视图就是洋葱心。如果 <code>request</code> 通过洋葱的各层(每层通过调用 <code>get_response</code> 传递 <code>request</code> 到下一层)，传向中心的视图，<code>response</code> 会原路返回穿过各层。</p><p>如果某一次决定短路直接返回 <code>response</code> (不再调用 <code>get_response</code> )，余下的各层和视图将不会见到任何  <code>request</code> 和 <code>response</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django源码分析-二-–中间件&quot;&gt;&lt;a href=&quot;#Django源码分析-二-–中间件&quot; class=&quot;headerlink&quot; title=&quot;Django源码分析(二)–中间件&quot;&gt;&lt;/a&gt;Django源码分析(二)–中间件&lt;/h1&gt;&lt;p&gt;接上回, &lt;code
      
    
    </summary>
    
      <category term="Django" scheme="http://liuwenfeng.xyz/categories/Django/"/>
    
    
      <category term="Django" scheme="http://liuwenfeng.xyz/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django源码分析(一)--runserver启动过程分析</title>
    <link href="http://liuwenfeng.xyz/2018/03/28/django-runserver-process/"/>
    <id>http://liuwenfeng.xyz/2018/03/28/django-runserver-process/</id>
    <published>2018-03-28T10:33:46.000Z</published>
    <updated>2019-02-12T09:25:53.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django框架总览"><a href="#Django框架总览" class="headerlink" title="Django框架总览"></a>Django框架总览</h2><p><div align="center"><br><img src="https://heavenlwf.github.io/images/django-overview.png"></div></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Django运行方式"><a href="#Django运行方式" class="headerlink" title="Django运行方式"></a>Django运行方式</h2><p>一般运行 <code>Django</code> 项目的方法有两种:</p><ul><li><p>在开发和调试中一般用 <code>runserver</code> 方法, 使用 <code>Django</code> 自己的 <code>Web Server</code></p></li><li><p>正式生产环境一般用 <code>uWSGI</code>、<code>fastcgi</code> 等协议运行 <code>Django</code> 项目</p></li></ul><h3 id="1、runserver-方式"><a href="#1、runserver-方式" class="headerlink" title="1、runserver 方式"></a>1、<code>runserver</code> 方式</h3><p>用法：(<code>./manage.py help runserver</code>查看)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">usage: manage.py runserver [-h] [--version] [-v &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;]</span><br><span class="line">                           [--settings SETTINGS] [--pythonpath PYTHONPATH]</span><br><span class="line">                           [--traceback] [--no-color] [--ipv6] [--nothreading]</span><br><span class="line">                           [--noreload] [--nostatic] [--insecure]</span><br><span class="line">                           [addrport]</span><br><span class="line"></span><br><span class="line">python manage.py runserver <span class="comment"># default port is 8000</span></span><br><span class="line">python manage.py runserver <span class="number">8080</span> </span><br><span class="line">python manage.py runserver <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure></p><p>查看 <code>manage.py</code> 内容可以发现, 首先<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"fadada.settings"</span>)</span><br></pre></td></tr></table></figure></p><p>设置了一个环境变量 <code>DJANGO_SETTINGS_MODULE</code> 等于 <code>project.settings</code>, 然后直接执行 <code>django.core.management</code> 中的 <code>execute_from_command_line</code> 方法, 并把命令行输入的参数传进去。</p><p>一路看到 <code>ManagementUtility</code> 的 <code>execute</code> 方法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#django\core\management\__init__.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagementUtility</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Given the command-line arguments, figure out which subcommand is being</span></span><br><span class="line"><span class="string">        run, create a parser appropriate to that command, and run it.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        ...</span><br><span class="line">        self.autocomplete()</span><br><span class="line">        ...</span><br><span class="line">        self.fetch_command(subcommand).run_from_argv(self.argv)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django\core\management\base.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseCommand</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_from_argv</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.execute(*args, **cmd_options)</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># django\core\management\commands\runserver.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(BaseCommand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> options[<span class="string">'no_color'</span>]:</span><br><span class="line">            <span class="comment"># We rely on the environment because it's currently the only</span></span><br><span class="line">            <span class="comment"># way to reach WSGIRequestHandler. This seems an acceptable</span></span><br><span class="line">            <span class="comment"># compromise considering `runserver` runs indefinitely.</span></span><br><span class="line">            os.environ[<span class="string">"DJANGO_COLORS"</span>] = <span class="string">"nocolor"</span></span><br><span class="line">        super().execute(*args, **options)</span><br><span class="line"></span><br><span class="line"><span class="comment"># django\core\management\base.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseCommand</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        output = self.handle(*args, **options)</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># django\contrib\staticfiles\management\commands\runserver.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(BaseCommand)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_handler</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        <span class="string">"""Return the default WSGI handler for the runner."""</span></span><br><span class="line">        <span class="keyword">return</span> get_internal_wsgi_application()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.run(**options)</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, **options)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.inner_run(<span class="keyword">None</span>, **options)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner_run</span><span class="params">(self, *args, **options)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">            handler = self.get_handler(*args, **options)</span><br><span class="line">            run(self.addr, int(self.port), handler,</span><br><span class="line">                ipv6=self.use_ipv6, threading=threading, server_cls=self.server_cls)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django\core\servers\basehttp.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_internal_wsgi_application</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> get_wsgi_application()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIRequestHandler</span><span class="params">(simple_server.WSGIRequestHandler)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGIServer)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    httpd.set_app(wsgi_handler)     <span class="comment"># 这里的wsgi_hander 是get_handler返回的一个 WSGIHandler 对象</span></span><br><span class="line">    httpd.serve_forever()</span><br><span class="line"></span><br><span class="line"><span class="comment"># django\core\wsgi.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_wsgi_application</span><span class="params">()</span>:</span></span><br><span class="line">    django.setup(set_prefix=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span> WSGIHandler()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django\core\handlers\wsgi.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span><span class="params">(base.BaseHandler)</span>:</span></span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.load_middleware()</span><br><span class="line"></span><br><span class="line"><span class="comment"># django\core\handlers\base.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseHandler</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>runserver</code> 命令先解析参数, 后面通过 <code>django.core.servers.basehttp.get_internal_wsgi_application</code> 方法获取 <code>wsgi_handler</code>, 这个方法先根据 <code>settings</code> 中的 <code>WSGI_APPLICATION</code> 来获取 <code>handler</code>, 在创建 <code>project</code> 的时候， <code>Django</code> 会默认创建一个 <code>wsgi.py</code> 文件，而 <code>settings</code> 中的 <code>WSGI_APPLICATION</code> 配置也会默认指向这个文件。看一下这个 <code>wsgi.py</code> 文件，其实它也和上面的逻辑一样，最终调用 <code>get_wsgi_application</code> 实现。</p><p>然后根据 <code>ip address</code> 和 <code>port</code> 生成一个 <code>WSGIServer</code> 对象 <code>httpd</code>，接受用户请求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGIServer)</span>:</span></span><br><span class="line">    server_address = (addr, port)</span><br><span class="line">    <span class="keyword">if</span> threading:</span><br><span class="line">        httpd_cls = type(<span class="string">'WSGIServer'</span>, (socketserver.ThreadingMixIn, server_cls), &#123;&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        httpd_cls = server_cls</span><br><span class="line">    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)</span><br><span class="line">    <span class="keyword">if</span> threading:</span><br><span class="line">        <span class="comment"># ThreadingMixIn.daemon_threads indicates how threads will behave on an</span></span><br><span class="line">        <span class="comment"># abrupt shutdown; like quitting the server by the user or restarting</span></span><br><span class="line">        <span class="comment"># by the auto-reloader. True means the server will not wait for thread</span></span><br><span class="line">        <span class="comment"># termination before it quits. This will make auto-reloader faster</span></span><br><span class="line">        <span class="comment"># and will prevent the need to kill the server manually if a thread</span></span><br><span class="line">        <span class="comment"># isn't terminating correctly.</span></span><br><span class="line">        httpd.daemon_threads = <span class="keyword">True</span></span><br><span class="line">    httpd.set_app(wsgi_handler)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure><p><code>WSGIHandler</code> 会初始化中间件并加载 <code>settings.MIDDLEWARE</code> 中的中间件, 关于中间件的问题下节再讲~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Django框架总览&quot;&gt;&lt;a href=&quot;#Django框架总览&quot; class=&quot;headerlink&quot; title=&quot;Django框架总览&quot;&gt;&lt;/a&gt;Django框架总览&lt;/h2&gt;&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http
      
    
    </summary>
    
      <category term="Django" scheme="http://liuwenfeng.xyz/categories/Django/"/>
    
    
      <category term="Django" scheme="http://liuwenfeng.xyz/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django中INSTALLED_APPS顺序的重要性</title>
    <link href="http://liuwenfeng.xyz/2017/07/21/importance-of-installted-app-in-django/"/>
    <id>http://liuwenfeng.xyz/2017/07/21/importance-of-installted-app-in-django/</id>
    <published>2017-07-21T09:28:43.000Z</published>
    <updated>2019-02-12T09:25:53.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django中INSTALLED-APPS顺序的重要性"><a href="#Django中INSTALLED-APPS顺序的重要性" class="headerlink" title="Django中INSTALLED_APPS顺序的重要性"></a>Django中INSTALLED_APPS顺序的重要性</h2><p>用Django自带的用户认证框架，新建app_name为account，创建models和form表单后， account下的 <code>urls.py</code> 如下所示:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.views <span class="keyword">import</span> login</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.views <span class="keyword">import</span> logout</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^login/$'</span>, login, name=<span class="string">'login'</span>),</span><br><span class="line">    url(<span class="string">r'^logout/$'</span>, logout, name=<span class="string">'logout'</span>),</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>创建 <code>registration/login.html</code> 和 <code>registration/logged_out.html</code> 模板。</p><p>运行后发现logout一直后跳转至Django后台的注销界面：</p><p><div align="center"><br><img src="https://heavenlwf.github.io/images/admin-error.jpg"><br></div><br>debug许久之后无果，翻阅<a href="https://docs.djangoproject.com/en/1.8/ref/settings/#installed-apps" target="_blank" rel="noopener">Django官方文档</a>后发现：</p><blockquote><p>When several applications provide different versions of the same resource (template, static file, management command, translation), the application listed first in INSTALLED_APPS has precedence.</p></blockquote><p>就是说当多个APP提供了不同的版本的相同资源时,INSTALLED_APPS前面的APP具有优先权。</p><p>将account放在 <code>django.contrib.admin</code> 前面:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="string">'account'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>问题解决~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Django中INSTALLED-APPS顺序的重要性&quot;&gt;&lt;a href=&quot;#Django中INSTALLED-APPS顺序的重要性&quot; class=&quot;headerlink&quot; title=&quot;Django中INSTALLED_APPS顺序的重要性&quot;&gt;&lt;/a&gt;Djang
      
    
    </summary>
    
      <category term="Django" scheme="http://liuwenfeng.xyz/categories/Django/"/>
    
    
      <category term="Django" scheme="http://liuwenfeng.xyz/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>一道笔试题引发的思考</title>
    <link href="http://liuwenfeng.xyz/2017/07/01/interview-think/"/>
    <id>http://liuwenfeng.xyz/2017/07/01/interview-think/</id>
    <published>2017-07-01T06:24:52.000Z</published>
    <updated>2019-06-17T06:46:01.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一道笔试题引发的思考"><a href="#一道笔试题引发的思考" class="headerlink" title="一道笔试题引发的思考"></a>一道笔试题引发的思考</h2><p>有下面一段代码，问输出的是什么<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> x: x * i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">print([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> fun()])</span><br></pre></td></tr></table></figure></p><p>我想都没想直接就写了[0, 2, 4, 6]</p><p>后面在突然想起来 <code>fun()</code> 返回的是一个 <code>list</code> 并不是一个 <code>generator</code>,所以输出肯定不是我之前想的那样。<br>经过研究和分析，发现了一些有意思的东西。</p><p>先来看下面一个栗子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_gen</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> x: x * i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">    </span><br><span class="line">print([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> fun_gen()])  <span class="comment"># [0, 2, 4, 6]</span></span><br><span class="line">print(type(fun_gen()))            <span class="comment"># &lt;type 'generator'&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看到这里 <code>fun_gen()</code> 返回的是一个 <code>generator</code>，所以每次迭代 <code>fun_gen()</code> 时返回的值都会随 <code>i</code> 的变化而变化。</p><p>好，我们再来看另一种调用方式:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fun_gen0, fun_gen1, fun_gen2, fun_gen3 = fun_gen()</span><br><span class="line">print([fun_gen0(<span class="number">2</span>), fun_gen1(<span class="number">2</span>), fun_gen2(<span class="number">2</span>), fun_gen3(<span class="number">2</span>)])   <span class="comment"># [6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure></p><p>这里一次就把 <code>fun_gen()</code> 的代码执行完了，也就是说一次就把生成器迭代完了，所以返回的 <code>i</code> 都指向最后一个值3，所以最后打印出来的值都是6。</p><p>好了，再来看原来那段代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> x: x * i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    </span><br><span class="line">print([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> fun()])   <span class="comment"># [6, 6, 6, 6]</span></span><br><span class="line">print(type(fun())              <span class="comment"># &lt;type 'list'&gt;</span></span><br><span class="line"></span><br><span class="line">fun_list = fun()</span><br><span class="line">print(len(fun_list))         <span class="comment"># 4</span></span><br><span class="line">print(fun_list[<span class="number">0</span>])           <span class="comment"># &lt;type 'function'&gt;</span></span><br><span class="line">print(fun_list[<span class="number">1</span>])           <span class="comment"># &lt;type 'function'&gt;</span></span><br><span class="line">print(fun_list[<span class="number">2</span>])           <span class="comment"># &lt;type 'function'&gt;</span></span><br><span class="line">print(fun_list[<span class="number">3</span>])           <span class="comment"># &lt;type 'function'&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样一来就清楚很多了，<code>fun()</code> 返回的是一个 <code>list</code>，而这个list里面放了四个 <code>function</code>，所以 <code>fun()</code> 返回的时候就已经把生成器给迭代完了，而此时的 <code>i</code> 已经指向最后一个值3，所以后面在对 <code>fun()</code> 进行迭代的时候 <code>fun()</code> 返回 <code>list</code> 里的四个 <code>function</code> 中的i也都是3，这样一来，结果就都是6了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一道笔试题引发的思考&quot;&gt;&lt;a href=&quot;#一道笔试题引发的思考&quot; class=&quot;headerlink&quot; title=&quot;一道笔试题引发的思考&quot;&gt;&lt;/a&gt;一道笔试题引发的思考&lt;/h2&gt;&lt;p&gt;有下面一段代码，问输出的是什么&lt;br&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="Python" scheme="http://liuwenfeng.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liuwenfeng.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中的generator、Iterator和Iterable</title>
    <link href="http://liuwenfeng.xyz/2017/05/27/generator-Iterator/"/>
    <id>http://liuwenfeng.xyz/2017/05/27/generator-Iterator/</id>
    <published>2017-05-27T09:15:23.000Z</published>
    <updated>2019-02-12T08:34:50.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python中的generator、Iterator和Iterable"><a href="#Python中的generator、Iterator和Iterable" class="headerlink" title="Python中的generator、Iterator和Iterable"></a>Python中的generator、Iterator和Iterable</h2><h3 id="可迭代对象-Iterable"><a href="#可迭代对象-Iterable" class="headerlink" title="可迭代对象(Iterable)"></a>可迭代对象(Iterable)</h3><p>在Python中，迭代是通过 <code>for ... in</code> 来完成的。可以直接用于 <code>for</code> 循环的数据类型有：</p><ul><li>集合数据类型：<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等</li><li><code>generator</code>，包括生成器和带 <code>yield</code> 的generator function.</li></ul><p>这些可以直接用于 <code>for</code> 循环的对象统称为可迭代对象：<code>Iterable</code>。</p><p>可以使用isintance()判断一个对象是否是 <code>Iterable</code> 对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterable)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(&#123;&#125;, Iterable)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'fuck'</span>, Iterable)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">16</span>) <span class="keyword">if</span> x%<span class="number">2</span> == <span class="number">0</span>)), Iterable)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h3 id="生成器-generator"><a href="#生成器-generator" class="headerlink" title="生成器(generator)"></a>生成器(generator)</h3><h3 id="生成器表达式-generator-expression"><a href="#生成器表达式-generator-expression" class="headerlink" title="生成器表达式(generator expression)"></a>生成器表达式(generator expression)</h3><p>列表解析可以很方便创建一个列表，但是，当创建一个很大的列表而且我们仅仅需要用到前几个元素的时候，不仅会占用很大的内存，而且后面不需要用到的元素占用的空间也都浪费了。</p><p>为此，Python中引入了一种机制；叫作生成器：<code>generator</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x7f7dd1a53ba0</span>&gt;</span><br></pre></td></tr></table></figure></p><p>我们把列表解析的[]改成()，就创建了一个 <code>generator</code>。这里，<code>l</code>是一个 <code>list</code>，而 <code>g</code> 是一个<code>generator</code>。</p><p>我们可以直接获取list的每一个元素，但要获取generator的每一个元素，要通过 <code>next()</code> 函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></p><p>每次调用 <code>next(g)</code>，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出 <code>StopIteration</code> 的错误。</p><p>当然，实际中我们不可能通过 <code>next()</code> 来一个一个获取里面的元素，而是通过 <code>for</code> 循环，因为<code>generator</code> 也是一个 <code>可迭代对象</code>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line"><span class="meta">... </span>    print(n)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p><p>所以，当我们创建一个generator后，基本永远不会用 <code>next()</code>，而是通过 <code>for</code> 循环来迭代它，并且不用关心 <code>StopIteration</code> 错误。</p><h4 id="generator-function"><a href="#generator-function" class="headerlink" title="generator function"></a>generator function</h4><p>来看一个生成斐波那契数列的generator function<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(num)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; num:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'done'</span></span><br></pre></td></tr></table></figure></p><p>这里的函数包含了一个 <code>yield</code> 关键字，那么这个函数就不是普通函数而是一个generator：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = fib(4)</span><br><span class="line">&gt;&gt;&gt; f</span><br><span class="line">&lt;generator object fib at 0x7f7dd04e9570&gt;</span><br></pre></td></tr></table></figure></p><p>使用 <code>for</code> 循环来迭代：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for n in fib(5):</span><br><span class="line">...     print(n)</span><br><span class="line">...</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><p>但是用 <code>for</code> 循环调用generator时，发现拿不到generator的 <code>return</code> 语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在 <code>StopIteration</code> 的 <code>value</code> 中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; g = fib(5)</span><br><span class="line">&gt;&gt;&gt; while True:</span><br><span class="line">...     try:</span><br><span class="line">...         x = next(g)</span><br><span class="line">...         print(&apos;g:&apos;, x)</span><br><span class="line">...     except StopIteration as e:</span><br><span class="line">...         print(&apos;Generator return value:&apos;, e.value)</span><br><span class="line">...         break</span><br><span class="line">...</span><br><span class="line">g: 1</span><br><span class="line">g: 1</span><br><span class="line">g: 2</span><br><span class="line">g: 3</span><br><span class="line">g: 5</span><br><span class="line">Generator return value: done</span><br></pre></td></tr></table></figure></p><h3 id="迭代器（Iterator）"><a href="#迭代器（Iterator）" class="headerlink" title="迭代器（Iterator）"></a>迭代器（Iterator）</h3><p>可以被 <code>next()</code> 函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。</p><p>可以使用<code>isinstance()</code>判断一个对象是否是 <code>Iterator</code> 对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterator)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterator)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(&#123;&#125;, Iterator)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterator)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>==生成器一定是迭代器（反之不成立）==。但 <code>list</code>、<code>dict</code>、<code>str</code>虽然是 <code>Iterable</code>，却不是 <code>Iterator</code>。</p><p>把 <code>list</code>、<code>dict</code>、<code>str</code> 等 <code>Iterable</code> 变成 <code>Iterator</code> 可以使用 <code>iter()</code> 函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter([]), Iterator)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(iter(<span class="string">'abc'</span>), Iterator)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>任何实现了 <code>__iter__</code> 和 <code>__next__()</code>（python2中实现 <code>next()</code>）方法的对象都是迭代器，<code>__iter__</code> 返回迭代器自身，<code>__next__</code> 返回容器中的下一个值，如果容器中没有更多元素了，则抛出 <code>StopIteration</code> 异常，至于它们到底是如何实现的这并不重要。</p><p>为了更直观地感受迭代器内部的执行过程，我们自定义一个迭代器，以斐波那契数列为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        self.prev = <span class="number">0</span></span><br><span class="line">        self.curr = <span class="number">1</span></span><br><span class="line">        self.number = number</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        value = self.curr</span><br><span class="line">        <span class="keyword">if</span> self.number &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.curr += self.prev</span><br><span class="line">        self.prev = value</span><br><span class="line">        self.number -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> Fib(<span class="number">6</span>):</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>Fib既是一个可迭代对象（因为它实现了 <code>__iter__</code> 方法），又是一个迭代器（因为实现了 <code>__next__</code> 方法）。实例变量 <code>prev</code> 和 <code>curr</code> 用户维护迭代器内部的状态。每次调用 <code>next()</code> 方法的时候做两件事：</p><p><ol></ol></p><p><li>为下一次调用<code>next()</code>方法修改状态</li></p><p><li>为当前这次调用生成返回结果</li><br><br>迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python中的generator、Iterator和Iterable&quot;&gt;&lt;a href=&quot;#Python中的generator、Iterator和Iterable&quot; class=&quot;headerlink&quot; title=&quot;Python中的generator、Iter
      
    
    </summary>
    
    
      <category term="Python" scheme="http://liuwenfeng.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>调用父类方法</title>
    <link href="http://liuwenfeng.xyz/2017/05/18/call-parent-class-method/"/>
    <id>http://liuwenfeng.xyz/2017/05/18/call-parent-class-method/</id>
    <published>2017-05-18T09:55:34.000Z</published>
    <updated>2019-02-12T08:33:46.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调用父类方法"><a href="#调用父类方法" class="headerlink" title="调用父类方法"></a>调用父类方法</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>你想在子类中调用父类的某个已经被覆盖的方法。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>为了调用父类(超类)的一个方法，可以使用的 <code>super()</code> 函数，比如:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A.spam'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'B.spam'</span>)</span><br><span class="line">        super().spam()  <span class="comment"># Call parent spam()</span></span><br></pre></td></tr></table></figure></p><p><code>super()</code> 函数的一个常见用法是在 <code>__init__()</code> 方法中确保父类被正确的初始化了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.y = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><code>super()</code> 的另外一个常见用法出现在覆盖Python特殊方法的代码中，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        self._obj = obj</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Delegate attribute lookup to internal obj</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self._obj, name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Delegate attribute assignment</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name.startswith(<span class="string">'_'</span>):</span><br><span class="line">            super().__setattr__(name, value) <span class="comment"># Call original __setattr__</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            setattr(self._obj, name, value)</span><br></pre></td></tr></table></figure></p><p>在上面代码中，<code>__setattr__()</code> 的实现包含一个名字检查。 如果某个属性名以下划线(_)开头，就通过 <code>super()</code> 调用原始的 <code>__setattr__()</code> ， 否则的话就委派给内部的代理对象 <code>self._obj</code> 去处理。 这看上去有点意思，因为就算没有显式的指明某个类的父类， <code>super()</code> 仍然可以有效的工作。</p><h3 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h3><p>我们来看下面调用父类的一个方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Base.__init__'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Base.__init__(self)</span><br><span class="line">        print(<span class="string">'A.__init__'</span>)</span><br></pre></td></tr></table></figure></p><p>尽管对于大部分代码而言这么做并没有什么问题，但是在涉及更复杂的多继承代码中可能会导致很奇怪的问题发生，比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span></span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">'Base.__init__'</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Base.__init__(self)</span><br><span class="line">        print(<span class="string">'A.__init__'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Base.__init__(self)</span><br><span class="line">        print(<span class="string">'B.__init__'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        A.__init__(self)</span><br><span class="line">        B.__init__(self)</span><br><span class="line">        print(<span class="string">'C.__init__'</span>)</span><br></pre></td></tr></table></figure></p><p>运行这段代码你会发现 <code>Base.__init__()</code>被调用了两次<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c = C()</span><br><span class="line">Base.__init__()</span><br><span class="line">A.__init__()</span><br><span class="line">Base.__init__()</span><br><span class="line">B.__init__()</span><br><span class="line">C.__init__()</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>将代码换成 <code>super()</code>就不一样了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Base.__init__'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        print(<span class="string">'A.__init__'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        print(<span class="string">'B.__init__'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        print(<span class="string">'C.__init__'</span>)</span><br></pre></td></tr></table></figure></p><p>运行这个版本之后，你会发现每个 <code>__init__</code>只运行了一次。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = C()</span><br><span class="line">Base.__init__</span><br><span class="line">B.__init__</span><br><span class="line">A.__init__</span><br><span class="line">C.__init__</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>为了弄清它的原理，我们需要花点时间解释下Python是如何实现继承的。 对于你定义的每一个类，Python会计算出一个所谓的方法解析顺序(MRO)列表。 这个MRO列表就是一个简单的所有基类的线性顺序表。例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;C.__mro__</span><br><span class="line">(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;,</span><br><span class="line">&lt;class '__main__.Base'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>为了实现继承，Python会在MRO列表上从左到右开始查找基类，直到找到第一个匹配这个属性的类为止。</p><p>而这个MRO列表的构造是通过一个C3线性化算法来实现的。 我们不去深究这个算法的数学原理，它实际上就是合并所有父类的MRO列表并遵循如下三条准则：</p><ul><li>子类会先于父类被检查</li><li>多个父类会根据它们在列表中的顺序被检查</li><li>如果对下一个类存在两个合法的选择，选择第一个父类</li></ul><p>当你使用 <code>super()</code> 函数时，Python会在MRO列表上继续搜索下一个类。 只要每个重定义的方法统一使用 <code>super()</code> 并只调用它一次， 那么控制流最终会遍历完整个MRO列表，每个方法也只会被调用一次。 这也是为什么在第二个例子中你不会调用两次 <code>Base.__init__()</code> 的原因。</p><p><code>super()</code> 有个令人吃惊的地方是它并不一定去查找某个类在MRO中下一个直接父类， 你甚至可以在一个没有直接父类的类中使用它。例如，考虑如下这个类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A.spam'</span>)</span><br><span class="line">        super().spam()</span><br></pre></td></tr></table></figure></p><p>如果你试着直接使用这个类就会出错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.spam()</span><br><span class="line">A.spam</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> spam</span><br><span class="line">AttributeError: <span class="string">'super'</span> object has no attribute <span class="string">'spam'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>但是，如果你使用多继承的话看看会发生什么：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'B.spam'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = C()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.spam()</span><br><span class="line">A.spam</span><br><span class="line">B.spam</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>你可以看到在类A中使用 <code>super().spam()</code> 实际上调用的是跟类A毫无关系的类B中的 <code>spam()</code> 方法。 这个用类C的MRO列表就可以完全解释清楚了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.__mro__</span><br><span class="line">(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;,</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure></p><p>在定义混入类的时候这样使用 <code>super()</code> 是很普遍的。</p><p>然而，由于 <code>super()</code> 可能会调用不是你想要的方法，你应该遵循一些通用原则。 首先，确保在继承体系中所有相同名字的方法拥有可兼容的参数签名(比如相同的参数个数和参数名称)。 这样可以确保 <code>super()</code> 调用一个非直接父类方法时不会出错。 其次，最好确保最顶层的类提供了这个方法的实现，这样的话在MRO上面的查找链肯定可以找到某个确定的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;调用父类方法&quot;&gt;&lt;a href=&quot;#调用父类方法&quot; class=&quot;headerlink&quot; title=&quot;调用父类方法&quot;&gt;&lt;/a&gt;调用父类方法&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://liuwenfeng.xyz/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liuwenfeng.xyz/tags/Python/"/>
    
  </entry>
  
</feed>
